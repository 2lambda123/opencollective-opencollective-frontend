/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

declare module "@apollo/client" {

  export function gql(source: "\n  fragment NavbarFields on CollectiveFeatures {\n    id\n    ABOUT\n    CONNECTED_ACCOUNTS\n    RECEIVE_FINANCIAL_CONTRIBUTIONS\n    RECURRING_CONTRIBUTIONS\n    EVENTS\n    PROJECTS\n    USE_EXPENSES\n    RECEIVE_EXPENSES\n    USE_EXPENSES\n    COLLECTIVE_GOALS\n    TOP_FINANCIAL_CONTRIBUTORS\n    CONVERSATIONS\n    UPDATES\n    TEAM\n    CONTACT_FORM\n    RECEIVE_HOST_APPLICATIONS\n    HOST_DASHBOARD\n    TRANSACTIONS\n    REQUEST_VIRTUAL_CARDS\n  }\n"): typeof import('./graphql').NavbarFieldsFragmentDoc;
  export function gql(source: "\n  mutation CreatePaymentIntent($paymentIntent: PaymentIntentInput!) {\n    createPaymentIntent(paymentIntent: $paymentIntent) {\n      id\n      paymentIntentClientSecret\n      stripeAccount\n      stripeAccountPublishableSecret\n    }\n  }\n"): typeof import('./graphql').CreatePaymentIntentDocument;
  export function gql(source: "\n  query ContributionFlowPaymentMethods($slug: String) {\n    account(slug: $slug) {\n      id\n      paymentMethods(\n        type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]\n        includeExpired: true\n      ) {\n        id\n        name\n        data\n        service\n        type\n        expiryDate\n        providerType\n        sourcePaymentMethod {\n          id\n          name\n          data\n          service\n          type\n          expiryDate\n          providerType\n          balance {\n            currency\n          }\n          limitedToHosts {\n            id\n            legacyId\n            slug\n          }\n        }\n        balance {\n          valueInCents\n          currency\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n        limitedToHosts {\n          id\n          legacyId\n          slug\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ContributionFlowPaymentMethodsDocument;
  export function gql(source: "\n  mutation editVirtualCard(\n    $virtualCard: VirtualCardReferenceInput!\n    $name: String!\n    $limitAmount: AmountInput\n    $limitInterval: VirtualCardLimitInterval\n    $assignee: AccountReferenceInput!\n  ) {\n    editVirtualCard(\n      virtualCard: $virtualCard\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      assignee: $assignee\n    ) {\n      id\n      name\n      spendingLimitAmount\n      spendingLimitInterval\n      assignee {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"): typeof import('./graphql').EditVirtualCardDocument;
  export function gql(source: "\n  mutation createVirtualCard(\n    $name: String!\n    $limitAmount: AmountInput!\n    $limitInterval: VirtualCardLimitInterval!\n    $account: AccountReferenceInput!\n    $assignee: AccountReferenceInput!\n  ) {\n    createVirtualCard(\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      account: $account\n      assignee: $assignee\n    ) {\n      id\n      name\n      last4\n      data\n    }\n  }\n"): typeof import('./graphql').CreateVirtualCardDocument;
  export function gql(source: "\n  query CollectiveMembers($slug: String!) {\n    account(slug: $slug) {\n      id\n      members(role: ADMIN) {\n        nodes {\n          id\n          account {\n            id\n            name\n            imageUrl\n            slug\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CollectiveMembersDocument;
  export function gql(source: "\n  query VirtualCardPoliciesQuery($slug: String) {\n    account(slug: $slug) {\n      id\n      policies {\n        MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {\n          ALL_TIME {\n            valueInCents\n          }\n          DAILY {\n            valueInCents\n          }\n          MONTHLY {\n            valueInCents\n          }\n          PER_AUTHORIZATION {\n            valueInCents\n          }\n          WEEKLY {\n            valueInCents\n          }\n          YEARLY {\n            valueInCents\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardPoliciesQueryDocument;
  export function gql(source: "\n  fragment LoggedInAccountExpensePayoutFields on Individual {\n    id\n    slug\n    imageUrl\n    type\n    name\n    legalName\n    hasTwoFactorAuth\n    location {\n      id\n      address\n      country\n      structured\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    adminMemberships: memberOf(role: ADMIN, includeIncognito: false, accountType: [ORGANIZATION, COLLECTIVE, FUND]) {\n      nodes {\n        id\n        account {\n          id\n          slug\n          imageUrl\n          type\n          name\n          legalName\n          isActive\n          isHost\n          policies {\n            REQUIRE_2FA_FOR_ADMINS\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              policies {\n                REQUIRE_2FA_FOR_ADMINS\n              }\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          ... on Organization {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          location {\n            id\n            address\n            country\n            structured\n          }\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n          childrenAccounts {\n            nodes {\n              id\n              slug\n              imageUrl\n              type\n              name\n              isActive\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').LoggedInAccountExpensePayoutFieldsFragmentDoc;
  export function gql(source: "\n  fragment ExpenseHostFields on Host {\n    id\n    name\n    legalName\n    slug\n    type\n    currency\n    isHost\n    expensePolicy\n    website\n    settings\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n    paypalPreApproval {\n      id\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    hasDisputedOrders\n    hasInReviewOrders\n    plan {\n      id\n    }\n  }\n"): typeof import('./graphql').ExpenseHostFieldsFragmentDoc;
  export function gql(source: "\n  fragment ExpensePageExpenseFields on Expense {\n    id\n    legacyId\n    description\n    longDescription\n    currency\n    type\n    status\n    privateMessage\n    tags\n    amount\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n      }\n    }\n    createdAt\n    invoiceInfo\n    requiredLegalDocuments\n    feesPayer\n    draft\n    items {\n      id\n      incurredAt\n      description\n      amount\n      url\n    }\n    taxes {\n      id\n      type\n      rate\n      idNumber\n    }\n    attachedFiles {\n      id\n      url\n      name\n    }\n    payee {\n      id\n      slug\n      name\n      legalName\n      type\n      isAdmin\n      location {\n        id\n        address\n        country\n      }\n      payoutMethods {\n        id\n        type\n        name\n        data\n        isSaved\n      }\n\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          # For Expenses across hosts\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n    }\n    payeeLocation {\n      id\n      address\n      country\n      structured\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n    }\n    host {\n      id\n      name\n      legalName\n      slug\n      type\n      website\n      location {\n        id\n        address\n        country\n      }\n    }\n    requestedByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n    }\n    account {\n      id\n      legacyId\n      slug\n      name\n      type\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      expensesTags {\n        id\n        tag\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      # For Hosts with Budget capabilities\n\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n      isSaved\n    }\n    virtualCard {\n      id\n      name\n      last4\n    }\n    permissions {\n      id\n      canEdit\n      canEditTags\n      canDelete\n      canSeeInvoiceInfo\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canComment\n      canUnschedulePayment\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    activities {\n      id\n      type\n      createdAt\n      data\n      individual {\n        id\n        type\n        slug\n        name\n        imageUrl\n      }\n    }\n    recurringExpense {\n      id\n      interval\n      endsAt\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n\n  \n  \n"): typeof import('./graphql').ExpensePageExpenseFieldsFragmentDoc;
  export function gql(source: "\n  fragment ExpensesListFieldsFragment on Expense {\n    id\n    legacyId\n    description\n    status\n    createdAt\n    tags\n    amount\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n      }\n    }\n    currency\n    type\n    requiredLegalDocuments\n    feesPayer\n    account {\n      id\n      name\n      slug\n      createdAt\n      currency\n      type\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n    }\n    permissions {\n      id\n      canDelete\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canSeeInvoiceInfo\n      canEditTags\n      canUnschedulePayment\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n      isSaved\n    }\n    payee {\n      id\n      type\n      slug\n      name\n      imageUrl(height: 80)\n      isAdmin\n\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n    }\n    createdByAccount {\n      id\n      type\n      slug\n      name\n    }\n  }\n"): typeof import('./graphql').ExpensesListFieldsFragmentFragmentDoc;
  export function gql(source: "\n  fragment ExpensesListAdminFieldsFragment on Expense {\n    id\n    payoutMethod {\n      id\n      type\n      data\n    }\n    items {\n      id\n      description\n      incurredAt\n      url\n      amount\n    }\n    taxes {\n      id\n      type\n      rate\n    }\n    attachedFiles {\n      id\n      url\n      name\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n"): typeof import('./graphql').ExpensesListAdminFieldsFragmentFragmentDoc;
  export function gql(source: "\n  mutation ClearCache($account: AccountReferenceInput!, $cacheTypes: [AccountCacheType!]) {\n    clearCacheForAccount(account: $account, type: $cacheTypes) {\n      id\n      slug\n      name\n    }\n  }\n"): typeof import('./graphql').ClearCacheDocument;
  export function gql(source: "\n  query SubmittedExpensesPage(\n    $collectiveSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      isHost\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n    expenses(\n      createdByAccount: { slug: $collectiveSlug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n          }\n        }\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').SubmittedExpensesPageDocument;
  export function gql(source: string): unknown;

    export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<    infer TType,    any  >    ? TType    : never;  
}